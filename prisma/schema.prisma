// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // --- User's Data ---
  outcomes      Outcome[]
  opportunities Opportunity[]
  solutions     Solution[]
  assumptions   Assumption[]
  experiments   Experiment[]
  interviews    Interview[]
  evidences     Evidence[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Outcome {
  id            String        @id @default(cuid())
  name          String
  description   Json?
  x_position    Float         @default(0)
  y_position    Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        OutcomeStatus @default(ON_TRACK)
  targetMetric  String?
  currentValue  Float?
  opportunities Opportunity[]
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Opportunity {
  id                 String        @id @default(cuid())
  name               String
  description        Json?
  x_position         Float         @default(0)
  y_position         Float         @default(0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  outcomeId          String?
  parentId           String?
  riceReach          Int?
  riceImpact         Float?
  riceConfidence     Float?
  riceEffort         Float?
  riceScore          Float?
  status             WorkflowStatus @default(BACKLOG)
  solutionCandidates Json?
  outcome            Outcome?      @relation(fields: [outcomeId], references: [id], onDelete: SetNull)
  parent             Opportunity?  @relation("OpportunityToOpportunity", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Opportunity[] @relation("OpportunityToOpportunity")
  solutions          Solution[]
  evidences          Evidence[]    @relation("EvidenceToOpportunity")
  userId             String
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([outcomeId])
  @@index([parentId])
  @@index([userId])
}

model Solution {
  id            String       @id @default(cuid())
  name          String
  description   Json?
  x_position    Float        @default(0)
  y_position    Float        @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  opportunityId String
  opportunity   Opportunity  @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  assumptions   Assumption[]
  status        WorkflowStatus @default(BACKLOG)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([opportunityId])
  @@index([userId])
}

model Assumption {
  id          String         @id @default(cuid())
  description String
  type        AssumptionType @default(DESIRABILITY)
  importance  Int            @default(5)
  evidence    Int            @default(1)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  solutionId  String
  solution    Solution       @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  experiments Experiment[]
  isValidated Boolean        @default(false)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Experiment {
  id              String     @id @default(cuid())
  hypothesis      String
  testMethod      String?
  successCriteria String?
  results         String?
  learnings       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  assumptionId    String
  assumption      Assumption @relation(fields: [assumptionId], references: [id], onDelete: Cascade)
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Interview {
  id          String     @id @default(cuid())
  interviewee String
  date        DateTime
  notes       Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  evidences   Evidence[]
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Evidence {
  id            String        @id @default(cuid())
  type          EvidenceType
  content       String
  createdAt     DateTime      @default(now())
  interviewId   String
  interview     Interview     @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  opportunities Opportunity[] @relation("EvidenceToOpportunity")
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

enum WorkflowStatus {
  BACKLOG
  DISCOVERY
  IN_PROGRESS
  DONE
  BLOCKED
}

enum OutcomeStatus {
  ON_TRACK
  AT_RISK
  ACHIEVED
  ARCHIVED
}

enum EvidenceType {
  VERBATIM
  PAIN_POINT
  DESIRE
  INSIGHT
}

enum AssumptionType {
  DESIRABILITY
  VIABILITY
  FEASIBILITY
  USABILITY
  ETHICAL
}
